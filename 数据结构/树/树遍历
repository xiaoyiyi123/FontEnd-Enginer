//递归的方式实现
	//前序遍历
	public void preOrder(TreeNode root) {
		if(root != null) {
			System.out.println(root.data);
			preOrder(root.getLeftNode());
			preOrder(root.getRightNode());
		}
	}
	//中序遍历
	public void middleOrder(TreeNode root) {
		if(root != null) {
			middleOrder(root.getLeftNode());
			System.out.println(root.data);
			middleOrder(root.getRightNode());
		}
	}
	
	//后序遍历
	public void lastOrder(TreeNode root) {
		if(root != null) {
			lastOrder(root.getLeftNode());//每次获取root.getLeftNode()相当于获取当前节点的左子节点，然后把左子节点当作下一次寻找的节点实现递归
			lastOrder(root.getRightNode());
			System.out.println(root.data);
		}
	}



//层次遍历
	/**
	 * 实现思路
	 * 借用队列这一数据结构先进先出
	 * 将给定的当前节点添加到队列中，然后将它从队列中取出，赋值给一个中间变量temp
	 * 判断这个中间变量是否有左子节点和右子节点，将他的左右子节点按顺序添加到队列当中
	 * 然后把当前队列中的位于第一个的值取出，接着赋值给中间变量，再找中间变量的左右子节点，添加到队列中
	 * 以此循环当当前队列为空时结束循环
	 * */
	public void levelOrder(TreeNode root) {
		LinkedList<TreeNode> queue = new LinkedList<>(); 
		queue.offer(root);
		while(!queue.isEmpty()) {
			TreeNode temp = queue.poll();//定义一个中间变量，每次这个中间变量的值，都等于从队列中出的那个节点
			System.out.print(temp.data);
			if(temp.getLeftNode() != null) {
				queue.offer(temp.getLeftNode());
			}
			if(temp.getRightNode() != null) {
				queue.offer(temp.getRightNode());
			}
		}
	}
	
	
	//求树的最大深度问题
	//maxDepth = 左子树和右子树的较大深度值加1
	public int maxDepth(TreeNode node) {
		if(node == null) {
			return 0;
		}
		int max = 0;
		int maxL = 0;
		int maxR = 0 ;
		if(node.getLeftNode() != null) {
			maxL = maxDepth(node.getLeftNode());
		}
		if(node.getRightNode() != null) {
			maxR = maxDepth(node.getRightNode());
		}
		max = maxL > maxR ? maxL + 1: maxR +1;
		return max;
	}


给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。
示例：
二叉树：[3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]

var levelOrder = function (node){
	if(node === null){
		return [];
	}
	var res = [];
	var queue = [];
	queue.push(node);
	while(queue.length>0){
		var currSize = queue.length,//当前层有几个节点，等于当前队列中有几个数据
			currResult = [];//当前层的所有节点
		for(var i = 0; i < currSize; i++){//将当前队列中节点放到节
			var temp = queue.shift();
			console.log(temp)
			currResult.push(temp.data);

			if(temp.left != null){
				queue.push(temp.left);
			}if(temp.right != null){
				queue.push(temp.right);
			}
		}
		res.push(currResult);
	}
	return res;
}
var result = levelOrder(node1);
console.log(result);

