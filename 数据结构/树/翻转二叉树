输入：

     4
   /   \
  2     7
 / \   / \
1   3 6   9
输出：

     4
   /   \
  7     2
 / \   / \
9   6 3   1
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
 
 var invertTree = function(root){
  if(root == null){
    return root;
  }
  var stack = [];
      stack.push(root);
  while(stack.length !== 0){
    var temp = queue.pop();
    var node = temp.left;
    temp.left = temp.right;
    temp.right = temp.left;
    
    if(temp.left !== null){
      stack.push(temp.left);
    }if(temp.right !== null){
      stack.push(temp.right);
    }
    
    return root;
  }
 }
 
 //递归法
 var invertTree = function(root) {
    if (!root) return null
    return {
        val: root.val,
        right: invertTree(root.left),
        left: invertTree(root.right)
    }
};

翻转等价二叉树
我们可以为二叉树 T 定义一个翻转操作，如下所示：选择任意节点，然后交换它的左子树和右子树。
只要经过一定次数的翻转操作后，能使 X 等于 Y，我们就称二叉树 X 翻转等价于二叉树 Y。
编写一个判断两个二叉树是否是翻转等价的函数。这些树由根节点 root1 和 root2 给出。
输入：root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
输出：true
解释：我们翻转值为 1，3 以及 5 的三个节点。


var flipEquiv = function(root1, root2) {
   if(root1 === root2) {
       return true;
   }
   if(root1 === null || root2 === null || root1.val !== root2.val) {
       return false;
   }

   var leftReseult = flipEquiv(root1.left,root2.right);
   var rightResult = flipEquiv(root1.right, root2.left);
   var leftF = flipEquiv(root1.left,root2.left);
   var rightF = flipEquiv(root1.right,root2.right);

   return (leftReseult && rightResult ) || (leftF && rightF);

   return (left && right) || (leftF && rightF);
   
}
java
public boolean flipEquiv(TreeNode root1, TreeNode root2) {
        if (root1 == root2){
            return true;
        }
        // 终止条件（和上边是相反的）
        if (root1 == null || root2 == null || root1.val != root2.val){
            return false;
        }

        // 判断子树是否相同，两类情况，只要复核一种就行
        boolean left = flipEquiv(root1.left, root2.right);
        boolean right = flipEquiv(root1.right, root2.left);
        boolean left1 = flipEquiv(root1.left, root2.left);
        boolean right1 = flipEquiv(root1.right, root2.right);
        return ( left && right) || (left1 && right1);

    }
