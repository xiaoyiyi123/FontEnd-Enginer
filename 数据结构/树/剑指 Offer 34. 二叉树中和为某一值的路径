输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。
示例:
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1

返回:
[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} sum
 * @return {number[][]}
 */
var pathSum = function(root, sum) {

  if(root == null){
      return [];
  }
  var result = [],//保存结果
        path = [];//保存路径
    var findPath = function(root,sum,result,path){
        if(root){
            path.push(root.val);//如果路径不为空首先将root节点添加到路径数组中去
            if(root.left == null && root.right == null){//当前节点是叶子节点
                if(sum === root.val){//说明我们找到了，就将目前为止的所有路径结构赋值添加到结果数组中去
                    result.push([...path]);
                }

            }else{//否则的话继续递归遍历每个节点
                    findPath(root.left,sum-root.val,result,path);
                    //sum-root.val是因为每次比较子树的时候，sum值是和除掉这个子树的跟节点的值比较的
                    findPath(root.right,sum-root.val,result,path);
                }
            path.pop();//处理完一整颗子树后往上回溯一个节点
            return result;
        }
    }
    return findPath(root,sum,result,path);
};
