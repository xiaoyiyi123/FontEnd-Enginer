1.二叉树的右视图
给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。
输出[1,3,4,6,8]
解释:

    1            <---
  /   \
  2     3         <---
   \     \
    5     4       <---
   /  \
  7    6          <---
 /
8                 <---

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var rightSideView = function(root) {
    var result = [];
    var queue = [];
    if(root === null){
        return result;
    }
    queue.push(root);
    while(queue.length !== 0){
        var len = queue.length;//定义一个len来保存当前queue，即当前层的节点数量，因为按下面的操作会改变queue的大小
        for(var i = 0; i < len; i++){
            var temp = queue.shift();
            if(temp.left !== null){
              queue.push(temp.left);
          }
            if(temp.right !== null){
              queue.push(temp.right);
            }
            if(i === len -1){//当i等于len-1的时候正好到达当前层的最后一个节点，将它加入到结果数组中返回
              result.push(temp.val);
            }
        }
        
    }

    return result;
};
