1.二叉树的右视图
给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。
输出[1,3,4,6,8]
解释:

    1            <---
  /   \
  2     3         <---
   \     \
    5     4       <---
   /  \
  7    6          <---
 /
8                 <---

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var rightSideView = function(root) {
    var result = [];
    var queue = [];
    if(root === null){
        return result;
    }
    queue.push(root);
    while(queue.length !== 0){
        var len = queue.length;//定义一个len来保存当前queue，即当前层的节点数量，因为按下面的操作会改变queue的大小
        for(var i = 0; i < len; i++){
            var temp = queue.shift();
            if(temp.left !== null){
              queue.push(temp.left);
          }
            if(temp.right !== null){
              queue.push(temp.right);
            }
            if(i === len -1){//当i等于len-1的时候正好到达当前层的最后一个节点，将它加入到结果数组中返回
              result.push(temp.val);
            }
        }
        
    }

    return result;
};

2.从前序与中序遍历序列构造二叉树
根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。
例如，给出
前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7
   
/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} preorder
 * @param {number[]} inorder
 * @return {TreeNode}
 */
var buildTree = function(preorder, inorder) {
    
    if(!inorder || inorder.length == 0) return null;
    var root = new TreeNode(preorder[0]);//preorder数组中的第一个节点为这颗二叉树的根节点
    var index = inorder.indexOf(root.val);//从inorder数组中找出根节点的位置，中序遍历数组中根节点前面的所有都是根节点左子树的节点，根节点后面的东西是跟节点右子树上的节点
    //分别对根节点左子树和右子树上的节点数组进行递归操作，依次找出子树上的根节点，循环往复知道中序遍历的数组为空递归出口
    //(preorder.slice(1,index+1)前序遍历的数组中截取出index为1的位置到index+1的位置上的节点，为根节点左子树上的节点，递归的时候每次对这个截取出来的数组进行操作
    //inorder.slice(0,index)中序遍历数组中根节点前面的所有都是根节点左子树的节点
    var leftNode = buildTree(preorder.slice(1,index+1),inorder.slice(0,index));
    //preorder.slice(index+1),前序遍历的数组中截取出index+1的位置开始一直到末尾的节点，为根节点右子树上的节点，递归的时候每次对这个截取出来的数组进行操作
    //inorder.slice(index+1)中序遍历数组中根节点后面都是根节点左子树的节点
    var rightNode = buildTree(preorder.slice(index+1),inorder.slice(index+1));
    root.left = leftNode;
    root.right = rightNode;

    return root;

};

3.106. 从中序与后序遍历序列构造二叉树
根据一棵树的中序遍历与后序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

中序遍历 inorder = [9,3,15,20,7]
后序遍历 postorder = [9,15,7,20,3]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} inorder
 * @param {number[]} postorder
 * @return {TreeNode}
 */
var buildTree = function(inorder, postorder) {
    if(inorder.length == 0 || postorder.length == 0) return null;
    var postLen = postorder.length;
    var root = new TreeNode(postorder[postLen -1]);
    var idx = inorder.indexOf(root.val);//root在中序遍历中的位置，说明左子树有idx个节点，右子树有整个长度-1-idx个节点
    var leftNode = buildTree(inorder.slice(0,idx),postorder.slice(0,idx));
    var rightNode = buildTree(inorder.slice(idx+1),postorder.slice(idx,postLen-1));

    root.left = leftNode;
    root.right = rightNode;

    return root;
};

4.前序+后序构造二叉树
思路：
用前序遍历的第一个元素创建出根节点
用前序遍历的第二个元素x，去后序遍历中找对应的下标y，将y+1就能得到左子树的个数了
将前序数组，后序数组拆分左右两部分
递归的处理前序数组左边、后序数组右边
递归的处理前序数组右边、后序数组右边
返回根节点

/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} pre
 * @param {number[]} post
 * @return {TreeNode}
 */
var constructFromPrePost = function(pre, post) {
    if(pre.length == 0 || post.length == 0) return null;
    var root = new TreeNode(pre[0]);
    var len = pre.length;

    var temp = pre[1],
        tempIdx = post.indexOf(temp);
    var leftCount = tempIdx + 1;

    var leftNode = constructFromPrePost(pre.slice(1,leftCount + 1),post.slice(0,leftCount));
    var rightNode = constructFromPrePost(pre.slice(leftCount+1),post.slice(leftCount,len-1));

    root.left = leftNode;
    root.right = rightNode;

    return root;
};
