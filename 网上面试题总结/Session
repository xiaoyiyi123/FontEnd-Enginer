1.什么是session

session是一种服务器机制，是存储在服务器上的信息，主要配合cookie完成浏览器的身份认证和状态存储方式多种多样，
可以是服务器的内存中，或者是mongo数据库，redis内存数据库中。为了获得更高的存取速度，服务器一般把Session放在内存里。
每个用户都会有一个独立的Session。如果Session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。
因此，Session里的信息应该尽量精简。
Session相对于cookie较安全点，当用户请求服务器的时候，服务器会把数据临时存下来，如果退出网站后，session会被销毁。

Session是基于cookie实现的，浏览器第一次访问服务器时，服务器创建一个Session，同时生成一个唯一的会话key，即sessionID。
接着sessionID及session分别作为key和value保存到缓存中，也可以保存到数据库中，然后服务器把sessionID通过set-cookie的方式写入浏览器，
浏览器下次访问服务器时直接携带上cookie中的sessionID，服务器再根据sessionID找到对应的session进行匹配，来判断用户是否登录。

2.session鉴权过程
【1】 客户端发起登录请求，服务器端创建session，并通过set-cookie将生成的sessionID写入的客户端的cookie中。
【2】 在发起其他需要权限的接口的时候，客户端的请求体的Header部分会携带sessionID发送给服务端。
     然后根据这个sessionId去找服务器端保存的该客户端的session，然后判断该请求是否合法。

3. 
1）.客户端把信息放入报文的实体部分，通常是以POST 方法把请求发送给服务器。
2）.服务器会发放用以识别用户的Session ID。通过验证从客户端发送过来的信息进行验证，
    然后把用户的认证状态与Session ID 绑定后记录在服务器端。
    向客户端返回响应时，会在首部字段Set-Cookie 内写入Session ID（如PHPSESSID=l128ogl…）。
3）.客户端接收到从服务器端发来的Session ID 后，会将其作为Cookie 保存在本地。
    下次向服务器发送请求时，浏览器会自动发送Cookie，所以Session ID 也随之发送到服务器。
    服务器端可通过验证接收到的Session ID 验证状态。

4. Cookie与Session的区别
1). cookie数据存放在客户的浏览器（客户端）上，session数据放在服务器上，但是服务端的session的实现对客户端的cookie有依赖关系的；
2). cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session；
3). session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能。
    考虑到减轻服务器性能方面，应当使用COOKIE；
    单个cookie在客户端的限制是4K，就是说一个站点在客户端存放的COOKIE不能超过4K；
4). session存储于服务器，可以理解为一个状态列表，拥有一个唯一识别符号sessionId，通常存放于cookie中。
    服务器收到cookie后解析出sessionId，再去session列表中查找，才能找到相应session。依赖cookie
    cookie类似一个令牌，装有sessionId，存储在客户端，浏览器通常会自动添加。
5). Cookie 在客户端（浏览器），Session 在服务器端。 
6). Cookie 的安全性一般，他人可通过分析存放在本地的 Cookie 并进行 Cookie 欺骗。
    在安全性第一的前提下，选择 Session 更优。
    重要交互信息比如权限等就要放在 Session 中，一般的信息记录放 Cookie 就好了。 
7). 单个 Cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 Cookie。 
8). Session 可以放在 文件、数据库或内存中，比如在使用 Node 时将 Session 保存在 redis 中。
    由于一定时间内它是保存在服务器上的，当访问增多时，会较大地占用服务器的性能。
    考虑到减轻服务器性能方面，应当适时使用 Cookie。 
9). Session 的运行依赖 Session ID，而 Session ID 是存在 Cookie 中的，
    也就是说，如果浏览器禁用了 Cookie，Session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 Session ID）。 6、用户验证这种场合一般会用 Session。因此，维持一个会话的核心就是客户端的唯一标识，即 Session ID。





















































