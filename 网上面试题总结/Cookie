Cookie
1.什么是cookie：
“Cookie”是小量信息，由网络服务器发送出来以存储在网络浏览器上，从而下次这位独一无二的访客又回到该网络服务器时，可从该浏览器读回此信息。
这是很有用的，让浏览器记住这位访客的特定信息，如上次访问的位置、花费的时间或用户首选项（如样式表）。Cookie 是个存储在浏览器目录的文本文件，当浏览器运行时，存储在 RAM 中。
一旦你从该网站或网络服务器退出，Cookie 也可存储在计算机的硬驱上。当访客结束其浏览器对话时，即终止的所有 Cookie。

cookie的工作原理
（1）第一次用户登录的时候，输入用户名和密码信息，服务端接收后进行用户认证。
（2）服务端通过验证后，生成一个token以cookie的形式放在http的response header中一起返回给客户端。
（3）浏览器根据是否设置cookie的过期时间判断该cookie是会话cookie还是永久cookie，并将cookie存储在不同的位置。
（4）下次进行http请求时，请求头中会自动携带存储的cookie。
（5）服务端根据请求头中的cookie里面的token确认该用户的身份信息。




2.Cookie特点
Cookie内存大小受限
空	        IE 6.0	          IE 7.0 8.0	      Opera	        Fire Fox	      Safari	          Chrome
Cookie个数	每个域名下20个	    每个域名下50个	    每个域名30个	  每个域名50个	     没有限制	          每个域名53个
Cookie大小	4095字节	         4095字节	         4096字节	     4097字节	        4097字节	         4097字节

3.Cookie具有生命周期
Cookie可以保持登录信息到用户下次与服务器的会话，换句话说，下次访问同一网站时，用户会发现不必输入用户名和密码就已经登录了（当然，不排除用户手工删除Cookie）。
而还有一些Cookie在用户退出会话的时候就被删除了，这样可以有效保护个人隐私。
Cookie在生成时就会被指定一个Expire值，这就是Cookie的生存周期，在这个周期内Cookie有效，超出周期Cookie就会被清除。
有些页面将Cookie的生存周期设置为“0”或负值，这样在关闭浏览器时，就马上清除Cookie，不会记录用户信息，更加安全。

4.封装自己Cookie的增删改查函数
function setCookie(key, value, iDay) {
	var oDate = new Date();
	oDate.setDate(oDate.getDate() + iDay);
	document.cookie = key + '=' + value + ';expires=' + oDate;

}
function removeCookie(key) {
	setCookie(key, '', -1);//这里只需要把Cookie保质期退回一天便可以删除
}
function getCookie(key) {
	var cookieArr = document.cookie.split('; ');
	for(var i = 0; i < cookieArr.length; i++) {
		var arr = cookieArr[i].split('=');
		if(arr[0] === key) {
			return arr[1];
		}
	}
	return false;
}

创建和存储Cookie
对Cookie的所有操作都要通过读写document对象的Cookie属性来完成。Cookie的值都是以键值对的形式存储。
//创建一个名字Cookie，同时设置它的过期时间
function setCookie(c_name,value,expiredays){
     var exdate=new Date();
     exdate.setDate(exdate.getDate()+expiredays);
     //encodeURIComponent() 对 URI 进行编码
     document.cookie=c_name+ "=" +encodeURIComponent(value)+
((expiredays==null) ? "" : ";expires="+exdate.toGMTString());
}

读取Cookie
使用document.cookie可以获取到Cookie的值，不过这个值是一个字符串，为了更好地查看Cookie的值，往往会采用split()方法将Cookie中的名值对分离出来。
function getCookie(){
    // 初始化要返回的对象
    var cookie = {};
    var all = document.cookie;
    if(all === null){
        return cookie;
    }
    //分离出Cookie的各个属性
    var list = all.split(';');
    for(var i = 0;i < list.length;i++){
        // 查询出等号所在的位置
        var p = list[i].indexOf('=');
        // 分离出名字和值
        var name = list[i].substring(0,p);
        var value = list[i].substring(p+1);
        //对值进行解码
        value = decodeURIComponent(value);
        // 将名值对存储到对象中
        cookie[name] = value;
    }
    return cookie;
}


前端主动向后端跨域发送cookie
在解释这个问题之前先了解一下什么是跨域。两个域之间是不是存在跨域问题，主要是根据协议、域名、端口号这三个点进行判断，只要有一个不一样就是跨域。例如：
（1）协议不同：http://www.baidu.com 与https://www.baidu.com
（2）域名不同：http://www.baidu.com 与http://www.google.com
（3）端口号不同： http://www.baidu.com:8080 与http://www.baidu.com:8000
浏览器默认情况下无法主动跨域向后端发送cookie，需要在前端请求时加入配置项{withCredentials:true}。
jquery: 
$.ajax({url:'myurl',method:'GET', xhrFields:{withCredentials:true},success:function(){}});
angular: 
$http.get(url, {withCredentials: true})
axios: 
axios.defaults.withCredentials = true

前端配置好后还需要在后端进行相关配置：
在response header里面添加配置项
"Access-Control-Allow-Credentials“, “true” 
"Access-Control-Allow-Origin", ”yourdomain“

前端cookie
设置：
document.cookie = 'company=eoitek;max-age=10000;domain=eoitek.com;path=/;secure'
其中max-age是cookie的过期时间,是一个相对时间，值的单位是秒，是相对于cookie创建后多少秒才过期。
与max-age相似的配置属性是expires，值为日期对象的toUTCString()格式，即Thu, 21 Sep 2018 06:10:38 GMT，
是指cookie过期的绝对时间。如果max-age和expires都存在，则max-age的优先级更高。domain是我们设置cookie存放的域，
如果没有设置则为当前主机的域。path是指cookie存储的目录，默认为当前文件的存储目录。secure，加入此配置项，则指定该cookie只能通过https协议进行传输。
读取：
document.cookie
读取所有该域能获取到的cookie；格式为‘<key1>=<value1>;<key2>=<value2>;’

后端cookie

设置（以node为例）：
var http = require('http');
http.createServer(
  function(req, res) {
    res.setHeader('status', '200 OK');
    res.setHeader('Set-Cookie', 'name=binbinfang;path=/;
    max-age=1000;domain=eoitek.com');
    res.setHeader('Access-Control-Allow-Origin', 'eoitek.com');
    res.setHeader('Access-Control-Allow-Credentials', 'true');
    res.write('Hello World');
    res.end();
}).listen(8888);
console.log('running localhost:8888');

后端cookie比前端cookie多两个配置项：
httpOnly：设置了 HttpOnly 属性的 cookie 不能使用 JavaScript 经由 Document.cookie 属性、
XMLHttpRequest 和 Request APIs 进行访问，以防范跨站脚本攻击（XSS）；
SameSite=Strict
SameSite=Lax 
允许服务器设定一则 cookie 不随着跨域请求一起发送，这样可以在一定程度上防范跨站请求伪造攻击（CSRF）。

注意事项
（1）保存中文cookie
如果需要保存中文cookie，则需要对中文进行UTF-8编解码，即通过encodeUriComponent（）和decodeUriComponent（）方。
（2）保存图片和安全证书
cookie中也可以保存二进制图片和安全证书，需要对文件进行base64编码才能保存。不过建议最好不要将这类文件保存在cookie中。
（3）cookie的更新
只要将key；path；domain一致，则可以通过改变key对应的value来更新cookie的值。
（4）cookie的删除
cookie只能更新不能删除，如果想要删除一个cookie，则通过更新设置该cookie的max-age=0即可。
（5）cookie的安全性
设置cookie时添加secure。
cookie由于其设置和取值都是通过字符串的形式进行的。
因此，在原生cookie的操作比较麻烦，可通过一些js库来方便我们的操作，包括cookies.js和js-cookie

单点登录：多个不同系统整合到统一加载个平台，用户在任何一个系统登录后，可以访问这个统一加载上的所有系统。
登录之后，用户的权限和信息不再受某个系统的限制，即使某个系统出现故障(包括统一加载平台)，其他系统还是能正常使用的。
这就需要用户权限等信息保存到客户端，不受服务器的限制。
例如，我们有两个站点，都需要用户身份认证，要实现单点登录的话，可以将他们的一级域名设置为相同的，
如主站点设置为eoitek.test,子站点设置为sharplook.eoitek.test。
在创建cookie的时候，通过设置domain=.eoitek.test;path=/；
即可实现两个域名之间的cookie共享，如果将认证信息的token放在cookie中则可以实现单点登录了。






































