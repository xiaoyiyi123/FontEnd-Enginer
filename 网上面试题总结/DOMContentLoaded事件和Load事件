1.DOMContentLoaded事件：页面文档完全加载并解析完毕之后会触发。
在html文档加载完毕，并且html所引用的内联js，以及外链js的同步代码都执行完毕后触发。
2.Load事件：当所有资源加载完成后触发的。
当页面DOM结构中的js，css，图片，以及js异步加载的js，css，图片都加载完成之后才会触发load事件。

HTML文档的加载与页面的首次渲染
当我们输入一个页面地址时，发生了哪些事情呢？

1、浏览器首先下载该地址所对应的 html 页面。
2、浏览器解析 html 页面的 DOM 结构。
3、开启下载线程对文档中的所有资源按优先级排序下载。
4、主线程继续解析文档，到达 head 节点 ，head 里的外部资源无非是外链样式表和外链 js。
发现有外链 css 或者外链 js，如果是外链 js ，则停止解析后续内容，等待该资源下载，下载完后立刻执行。
如果是外链 css，继续解析后续内容。
5、解析到 body
body 里的情况比较多，body 里可能只有 DOM 元素，可能既有 DOM、也有 css、js 等资源，
js 资源又有可能异步加载 图片、css、js 等。DOM 结构不同，浏览器的解析机制也不同：
只有 DOM 元素
这种情况比较简单了，DOM 树构建完，页面首次渲染。
有 DOM 元素、外链 js。
当解析到外链 js 的时候，该 js 尚未下载到本地，则 js 之前的 DOM 会被渲染到页面上，
同时 js 会阻止后面 DOM 的构建，即后面的 DOM 节点并不会添加到文档的 DOM 树中。
所以，js 执行完之前，在页面上看不到该 js 后面的 DOM 元素。
有 DOM 元素、外链 css
外链 css 不会影响 css 后面的 DOM 构建，但是会阻碍渲染。
简单点说，外链 css 加载完之前，页面还是白屏。
有 DOM 元素、外链 js、外链 css
外链 js 和外链 css 的顺序会影响页面渲染，这点尤为重要。
当 body 中 js 之前的外链 css 未加载完之前，页面是不会被渲染的。
当body中 js 之前的 外链 css 加载完之后，js 之前的 DOM 树和 css 合并渲染树，
页面渲染出该 js 之前的 DOM 结构。
6、文档解析完毕，页面重新渲染。当页面引用的所有 js 同步代码执行完毕，触发 DOMContentLoaded 事件。
7、html 文档中的图片资源，js 代码中有异步加载的 css、js 、图片资源都加载完毕之后，load 事件触发。

<body>
  <!-- 白屏 -->
  <div id="div1"></div>
  <!-- 白屏 -->
  <link rel="stylesheet" href="./c1.css" />
  <!-- 白屏 -->
  <link rel="stylesheet" href="./c3.css" />
  <!-- 如果此时 j1.js 尚未下载到本地，则首次渲染，此时的 DOM 树 只有 div1 ，所以页面上只会显示 div1，样式是 c1.css 和 c3.css 的并集。-->
  <!-- 如果此时 j1.js 已经下载到本地，则先执行 j1.js，页面不会渲染，所以此时仍然是白屏。-->
  <!--下面的 js 阻塞了 DOM 树的构建，所以下面的 div2 没有在文档的 DOM 树中。 -->
  <script src="http://test.com:9000/mine/load/case2/j1.js"></script>
  <!-- j1.js 执行完毕，继续 DOM 解析，div2 被构建在文档 DOM 树中，此时页面上有了div2 元素，样式仍然是 c1.css 和 c3.css 的并集 -->
  <link rel="stylesheet" href="./c4.css" />
  <!-- c4.css 加载完毕，重新构建render树，样式变成了 c1.css、c3.css 和 c4.css 的并集 -->
  <div id="div2"></div>
  <script>
  // 利用 performance 统计 load 加载时间。
    window.onload=function(){console.log(performance.timing.loadEventStart - performance.timing.fetchStart);}
  </script>
</body>


作者：lucefer
链接：https://juejin.im/post/5b2a508ae51d4558de5bd5d1
来源：掘金

