async 函数就是 Generator 函数的语法糖。
对于一个Generator函数，依次读取两个文件
var fs = require('fs');
var readFile = function (fileName){
  return new Promise(function(resolve,reject)){
    fs.readFile(fileName,function(error,data){
      if(error) reject(error);
      resolve(data);
    });
  });
});
var gen = function* (){
  var f1 = yield readFile('/etc/fstab');
  var f2 = yield readFile('/etc/shells');
  console.log(f1.toString());
  console.log(f2.toString());
};
写成 async 函数，就是下面这样。
var asyncReadFile = async function(){
  var f1 = await readFile('/etc/fstab');
  var f2 = await readFile('/etc/shells');
  console.log(f1.toString());
  console.log(f2.toString());
};
async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。

优点
1）内置执行器。 Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。
也就是说，async 函数的执行，与普通函数一模一样，只要一行。
var result = asyncReadFile();
2）更好的语义。 async 和 await，比起星号和 yield，语义更清楚了。
async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。
3）更广的适用性。 co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，
而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）

async 函数的实现:
就是将 Generator 函数和自动执行器，包装在一个函数里。
function fn(args){ 
  return spawn(function*() {
    // ...
  }); 
}
spawn 函数就是自动执行器
spawn 函数
function spawn(genF) {
  return new Promise(function(resolve,reject){
    var gen = genF();
    function step(nextF){
      try{
        var next = nextF();
      }catch(e){
        return reject(e);
      }
      if(next.done){
        return resolve(next.value);
      }
      Promise.resolve(next.value).then(function(v) {
        step(function() { return gen.next(v); });      
      }, function(e) {
        step(function() { return gen.throw(e); });
      });
    }
    step(function() { return gen.next(undefined); });
  });
}
await means just wait the Promise resolve
使用
async函数返回一个Promise对象，可以使用then方法添加回调函数。
当函数执行时候一旦遇到await就会先返回，等到出发一步的操作完成，
再接着执行函数体内后面的语句
async  function getStockPriceByName(name){
  var symbol = await getStockSymbol(name);
  var StockPrice = await getStockPrice(symbol);
  return stockPrice;
}
getStockPriceByName('goog').then(function(result){
  console.log(result);
});
上面代码是一个获取股票报价的函数，函数前面的async关键字，
表明该函数内部有异步操作。调用该函数时，会立即返回一个Promise对象。








