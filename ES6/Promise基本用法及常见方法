1.基本用法
const promise = new Promise(function(resolve,reject){
  //some code
   if (/* 异步操作成功 */){
    resolve(value);
  } else {
    reject(error);
  }
});
Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。
它们是两个函数，由 JavaScript 引擎提供，不用自己部署。
resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），
在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；
reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），
在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。

Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。
promise.then(function(value){ 
  //success
},function(error){
  //failure
});
then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，
第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。
这两个函数都接受Promise对象传出的值作为参数。

function timeout(ms){
  return new Promise((resolve,reject) => {
    setTimeout(resolve,ms,'done');
  });
  timeout(100).then(value) => {
    console.log(value);
  }
}

Promise新建之后会立即执行
let promise = new Promise(function(resolve,reject){
  console.log('Promise');
});
promise.then(function(){
  console.log('resolved.');
})
console.log('Hi!');
//Promise Hi! resolved
Promise 新建后立即执行，所以首先输出的是Promise。
然后，then方法指定的回调函数，将在当前脚本所有同步任务执行完才会执行，所以resolved最后输出。

下面是异步加载图片的例子
function loadImageAsync(url){
  return new Promise(function(resolve,reject){
    const image = new Image();
    image.onload = function(){
      resolve(image);
    };
    image.onerror = function(){
      reject(new Error('Could not load image ar' + url));
    };
    image.src = url;
  }); 
}
使用Promise包装了一个图片加载的异步操作。如果加载成功，就调用resolve方法，否则就调用reject方法。

finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作


























