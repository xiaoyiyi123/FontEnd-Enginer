Thunk函数
在js语言中Thunk函数替换的不是表达式而是多参数函数，将其替换成但参数的版本，且只接受回调函数作为参数。
//正常版本的readFile（多参数版本）
fs.readFile(fileName,callback);
//Thunk版本的readFile（单参数版本）
var readFileThunk = Thunk(fileName);
readFileThunk(callback);
var Thunk = function(fileName){
  return funtion(callback){
    return fs.readFile(fileName,callback);
  };
};
fs 模块的 readFile 方法是一个多参数函数，两个参数分别为文件名和回调函数。
经过转换器处理，它变成了一个单参数函数，只接受回调函数作为参数。这个单参数版本，就叫做 Thunk 函数。

任何函数只要参数又回调函数就能写成Thunk函数的形式。
一个简单的Thunk函数转换器
var Thunk = function(){
  return function(){
    var args = Array.prototype.slice.call(arguments);
    return function(callback){
      args.push(callback);
      return fn.apply(this,args);
    }
  };
};
使用上面的转换器，生成 fs.readFile 的 Thunk 函数。
var readFileThunk = Thunk(fs.readFile);
readFileThunk(fileA)(callback);

Thunkify模块
1.安装：
$npm install thukify
2.使用方法：
var thunkify = require('thunkify');
var fs = require('fs');
var read = thunkify(fs.readFile);
read('package.json')(function(err,str)){
  //...
});

Generator函数的流程管理
ES6 有了 Generator 函数，Thunk 函数现在可以用于 Generator 函数的自动流程管理。

下面的Generator函数封装了两个异步操作
var fs = require('fs');
var thunkify = require('thunkify');
var readFile = thunkify(fs.readFile);
var gen = function* (){
  var r1 = yield readFile('/etc/fstab'):
  console.log(r1.toString());
  var r2 = yield readFile('/etc/shells'):
  console.log(r2.toString());
}

Thunk 函数真正的威力，在于可以自动执行 Generator 函数。
function run(fn){
  var gen = fn();
  function next(err,data){
    var result = gen.next(data);
    if(result.done) return;
    result.value(next);
  }
  next();
}
run(gen);
就是一个 Generator 函数的自动执行器。内部的 next 函数就是 Thunk 的回调函数。 
next 函数先将指针移到 Generator 函数的下一步（gen.next 方法），
然后判断 Generator 函数是否结束（result.done 属性），
如果没结束，就将 next 函数再传入 Thunk 函数（result.value 属性），否则就直接退出。

有了这个执行器，执行 Generator 函数方便多了。不管有多少个异步操作，直接传入 run 函数即可。
当然，前提是每一个异步操作，都要是 Thunk 函数，也就是说，跟在 yield 命令后面的必须是 Thunk 函数。
var gen = function* (){
  var f1 = yield readFile('fileA');
  var f2 = yield readFile('fileB');
  // ...
  var fn = yield readFile('fileN');
};
run(gen);
函数 gen 封装了 n 个异步的读取文件操作，只要执行 run 函数，这些操作就会自动完成。
这样一来，异步操作不仅可以写得像同步操作，而且一行代码就可以执行。



thunk 从形式上将函数的执行部分和回调部分分开，这样我们就可以在一个地方执行执行函数，在另一个地方执行回调函数。
这样做的价值就在于，
在做异步操作的时候，我们只需要知道回调函数执行的顺序和嵌套关系，就能按顺序取得执行函数的结果
Thunk用于传名调用，即把参数放进一个临时函数中，再将这个临时函数传入函数体
function(m){
  return m *2;
}
f(x +5);
var thunk = function(){
  return x + 5;
};
function main(thunnk){
  return thunk()*2;
}
x是参数，将其放进临时函数中，真正用需要的时候才调用，传入main函数中,典型的函数式编程思想。
在 JS 中，Thunk 函数替换的不是表达式，而是多参数函数，将其替换成单参数的版本，且只接受回调函数作为参数，
实质是函数的柯里化。

thunk的简单实现
function thunkify (fn) {
    return function () {
        var args = Array.prototype.slice(arguments);
        var ctx = this;

        return function (done) {
            var called = false;
            args.push(function() {
                if (called) return;
                called = true;
                done.apply(null, arguments);
            });
            try {
                fn.apply(ctx, args);
            } catch (err) {
                done(err);
            }
        }
    }
}

Thunk 函数真正的威力，在于可以自动执行 Generator 函数
function run(fn){
  var gen = fn();
  function next(err,data){
    var result = gen.next(data);
    if(result.done) return;
    result.value(next);/*递归,把next放进.value中*/
    //经过thunk的函数，参数只有callback，这里就是next函数！！，
  }
  next();
}
var g = function* (){
  var f1 = yield readFile('fileA');
  var f2 = yield readFile('fileB');
  // ...
  var fn = yield readFile('fileN');
};

run(g);
next 函数先将指针移到 Generator 函数的下一步（gen.next 方法），
然后判断 Generator 函数是否结束（result.done 属性），
如果没结束，就将 next 函数再传入 Thunk 函数（result.value 属性），否则就直接退出

在执行部分和回调部分分开之后，就可以使用generator等异步控制技术方便地进行流程控制，避免回调黑洞。
var fs = require('fs');
var readFile = thunkify(fs.readFile);

//**函数的‘执行部分’放在一起执行**//
var gen = function* () {
    var data1 = yield readFile('./a.js');
    // 用户获取数据后自定义写在这里
    console.log(data1.toString());
    
    var data2 = yield readFile('./b.js');
    // 用户获取数据后自定义写在这里
    console.log(data2);
    ····
}

// 函数的‘回调部分’在另一个地方执行，且调用的形式都一样
var g = gen();
var d1 = g.next(); // 返回的结果为{value: func, done: boolean}

// 执行value，实际为执行`d1.value(callback)`
// 也即`thunkify(fs.readFile)('./a.js')(callback)`
d1.value(function(err, data) {
    if (err) throw err;
    // g.next(data) 可以将参数data传回generator函数体，作为上一个阶段异步任务的执行结果
    // 例子中，data被传回了gen函数体，作为data1的值
    var d2 = g.next(data);
    d2.value(function(err, data2) {
        if (err) throw err;
        g.next(data2);
    });
});











