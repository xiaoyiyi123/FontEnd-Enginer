1.Set类似于数组，但是成员的值都是唯一的，没有重复的值
Set本身是一个构造函数，用来生成set数据结构
const s = new Set();
[2,3,4,5,2,2,2,2].forEach(x => s.add(x));
for(let i of s){
  console.log(i);//2,3,4,5通过add方法向set结构中加入成员，表明Set结构不会添加重复的值
}
set函数可以接受一个数组作为参数进行初始化也可以接受一个类数组的对象
const set = new Set([1,2,3,4,4]);
console.log([...set]);//1,2,3,4
set.size;//4
可以用来数组去重
[...new  Set([1,2,2,3,4,4])];
Array.from()将Set结构转化为数组
const items = new Set([1,2,3,4,5]);
const arr = items.from(items);
console.log(arr);//[1,2,3,4,5]
set实例的属性和方法：
属性：set.prototype.constructor:构造函数，默认就是就是set函数
     set.prototype.size:返回set实例的成员总数 
     
方法：操作方法
     Set.prototype.add(value)：添加某个值，返回 Set 结构本身。
     Set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
     Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。
     Set.prototype.clear()：清除所有成员，没有返回值。
     遍历方法
     Set.prototype.keys()：返回键名的遍历器
     Set.prototype.values()：返回键值的遍历器
     Set.prototype.entries()：返回键值对的遍历器
     Set.prototype.forEach()：使用回调函数遍历每个成员

WeakSet：
成员只能是对象，不能是其他类型的值
WeakSet 是一个构造函数，可以使用new命令，创建 WeakSet 数据结构。
const ws = new WeakSet();

WeakSet 结构有以下三个方法。没有size和clear方法
WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。
WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。
WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。
WeakSet 的一个用处，是储存 DOM 节点，而不用担心这些节点从文档移除时，会引发内存泄漏。


2. Map
引入原因：
JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键
ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。
也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。
const map = new Map([
  ['name', '张三'],
  ['title', 'Author']
]);

map.size // 2
map.has('name') // true
map.get('name') // "张三"
map.has('title') // true
map.get('title') // "Author"

实例的属性和方法
1）.size 属性：size属性返回 Map 结构的成员总数。
const map = new Map();
map.set('foo', true);
map.set('bar', false);
map.size // 2

2）Map.prototype.set(key, value)
set方法设置键名key对应的键值为value，然后返回整个 Map 结构。
如果key已经有值，则键值会被更新，否则就新生成该键。
const m = new Map();
m.set('edition', 6)        // 键是字符串
m.set(262, 'standard')     // 键是数值
m.set(undefined, 'nah')    // 键是 undefined
set方法返回的是当前的Map对象，因此可以采用链式写法。
let map = new Map()
  .set(1, 'a')
  .set(2, 'b')
  .set(3, 'c');
  
3).Map.prototype.get(key)
get方法读取key对应的键值，如果找不到key，返回undefined。
const m = new Map();
const hello = function() {console.log('hello');};
m.set(hello, 'Hello ES6!') // 键是函数
m.get(hello)  // Hello ES6!

4）Map.prototype.has(key)
has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。
const m = new Map();
m.set('edition', 6);
m.set(262, 'standard');
m.set(undefined, 'nah');
m.has('edition')     // true
m.has('years')       // false
m.has(262)           // true
m.has(undefined)     // true

5）Map.prototype.delete(key)
delete方法删除某个键，返回true。如果删除失败，返回false。

6）Map.prototype.clear()
clear方法清除所有成员，没有返回值。

遍历方法
Map 结构原生提供三个遍历器生成函数和一个遍历方法。
Map.prototype.keys()：返回键名的遍历器。
Map.prototype.values()：返回键值的遍历器。
Map.prototype.entries()：返回所有成员的遍历器。
Map.prototype.forEach()：遍历 Map 的所有成员。

const map = new Map([
  ['F', 'no'],
  ['T',  'yes'],
]);

for (let key of map.keys()) {
  console.log(key);
}// "F"
// "T"
for (let value of map.values()) {
  console.log(value);
}// "no"
// "yes"
for (let item of map.entries()) {
  console.log(item[0], item[1]);
}// "F" "no"
// "T" "yes"
// 或者
for (let [key, value] of map.entries()) {
  console.log(key, value);
}// "F" "no"
// "T" "yes"
// 等同于使用map.entries()
for (let [key, value] of map) {
  console.log(key, value);
}// "F" "no"
// "T" "yes"

Map 结构转为数组结构，比较快速的方法是使用扩展运算符（...）。
const map = new Map([
  [1, 'one'],
  [2, 'two'],
  [3, 'three'],
]);
[...map.keys()]// [1, 2, 3]
[...map.values()]// ['one', 'two', 'three']
[...map.entries()]// [[1,'one'], [2, 'two'], [3, 'three']]
[...map]// [[1,'one'], [2, 'two'], [3, 'three']]

结合数组的map方法、filter方法，可以实现 Map 的遍历和过滤（Map 本身没有map和filter方法）。
WeakMap
一是没有遍历操作（即没有keys()、values()和entries()方法），也没有size属性。
因为没有办法列出所有键名，某个键名是否存在完全不可预测，跟垃圾回收机制是否运行相关。
这一刻可以取到键名，下一刻垃圾回收机制突然运行了，这个键名就没了，为了防止出现不确定性，就统一规定不能取到键名。
二是无法清空，即不支持clear方法。因此，WeakMap只有四个方法可用：get()、set()、has()、delete()。












     
     
     
