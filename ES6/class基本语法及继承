Class类基本用法
Class类完全可以看作是构造函数的另一种写法，累的数据类型就是函数，类本身也就是其实例的构造函数。
使用时候使用new命令

class Person{
  constructor(name,age){
    this.name = name;
    this.age = age;
  }
  getName(){
    console.log(`My name is ${this.name}!`)
  }
  static sayHi(){
    console.log('Hi');
  }
}
let p = new Person();

constructor 方法
constructor方法就是类的构造方法，this关键字代表实例对象。
constructor方法就是类的默认方法，通过new名列生成对象实例时，会自动调用该方法。
一个类必须有constructor方法，如果没有显示定义，会默认添加一个空的constructor方法。
class Person{}
Person.prototype//{constructor:f}
constructor方法默认返回实例对象，也完全可以return另一个对象
class Foo{
  constructor(){
    return Object.create(null);
  }
}
new Foo() instanceof Foo //false
类必须使用new调用，也就是constructor方法只能通过new命令执行，否则会报错。

class类依旧存在prototype属性，且类的所有方法都定义在prototype属性上面
class Person{
  constructor(){
    aaa(){}
    bbb(){}
  }
}
Object.getOwnPropertyNames(Person.prototype)//["constructor", "aaa", "bbb"]

prototype对象的constructor属性也是直接指向类本身
Person.prototype.constructor === Person//true
p.cosntructor === Person

类的新方法可以通过Object.assign向prototype一次添加多个
class Person{
  constructor(){}
}
Object.assign(Person.prototype,{
  aaa(){},
  bbb(){}
})

Class 类的属性名，可以采用表达式。
let methodName = 'getName';
class Person {
  constructor() {}
  [methodName](){}
}
Object.getOwnPropertyNames(Person.prototype)   // ["constructor", "getName"]

取值函数 getter 和存值函数 setter
与 ES5 一样，在 Class 内部可以使用 get 和 set 关键字，
对某个属性设置存值函数和取值函数，拦截该属性的存取行为。
class Person {
  constructor() {
    this.name = 'dora';
  }
  get author() {
    return this.name;
  }
  set author(value) {
    this.name = this.name + value;
    console.log(this.name);
  }
}
let p = new Person();
p.author          //  dora
p.author = 666;   // dora666

Class 的 static 静态方法
类相当于实例的原型，所有在类中定义的方法，都会被实例继承。
但如果在一个方法前，加上 static 关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。

Class 的继承
Class 子类可以通过 extends 关键字实现继承
class Person{
  constructor(){}
  sayHi(){
    return 'Hi';
  }
}
class Teacher extends Person{
  constructor(){
  super();
  }
}
let t = new Teacher();
t.sayHi();//Hi

子类的 constructor
子类必须在 constructor 方法中调用 super() 方法，否则新建实例时会报错。
如果子类没有定义 constructor 方法，这个方法会被默认添加，
且子类默认添加的 constructor 方法都会默认执行 super() 方法。

super 关键字
super 这个关键字，既可以当作函数使用，也可以当作对象使用。用法完全不同
因为 ES6 的继承机制与 ES5 构造函数不同，ES6 的子类实例对象 this 必须先通过父类的构造函数创建，
得到与父类同样的实例属性和方法后再添加子类自己的实例属性和方法。
因此如果不调用 super() 方法，子类就得不到 this 对象。
super 虽然代表了父类的构造函数，但返回的是子类的实例，即通过super 执行父类构造函数时，
this 指的都是子类的实例。也就是 super() 相当于 Person.call(this)。
class A {
  constructor() {
    console.log(this.constructor.name)
  }
}
class B extends A {
  constructor() {
    super();
  }
}
new A()       // A
new B()       // B
super 对象
在普通方法中指向父类的 prototype 原型
super 作为对象时，在普通方法中，指向父类的 prototype 原型，
因此不在原型 prototype 上的属性和方法不可以通过 super 调用。
class A {
  constructor() {
    this.a = 3;
  }
  p() {return 2;}
}
A.prototype.m = 6;

class B extends A {
  constructor() {
    super();
    console.log(super.a);    // undefined
    console.log(super.p());  // 2
    console.log(super.m);    // 6
  }
}
new B();

任意对象的 super
由于对象总是继承其它对象的，所以可以在任意一个对象中，
使用 super 关键字，指向的是该对象的构造函数的 prototype 原型。
let obj = {
  m() {
    return super.constructor.name;
  }
};
obj.m();    // Object
注意，使用 super 的时候，必须显式的指定是作为函数还是作为对象使用，否则会报错。
class B extends A {
  m() {
    console.log(super);
  }
}
// SyntaxError: 'super' keyword unexpected here


new.target 属性
Class 内部调用 new.target，返回当前 Class。
且子类继承父类时，new.target 会返回子类。因此利用这个特点，
可以写出不能独立使用必须继承后才能使用的类
class Shape {
  constructor() {
    if(new.target === Shape) {
      throw new Error('本类不能实例化');
    }
  }
}

class Circle extends Shape {
  constructor(radius) {
    super();
    console.log('ok');
  }
}

let s = new Shape();      // 报错
let cir = new Circle(6);  // 'ok'



