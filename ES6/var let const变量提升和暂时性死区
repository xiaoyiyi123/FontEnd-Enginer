函数提升优先于变量提升，函数提升会把整个函数挪到作用域顶部，变量提升只会把声明挪到作用域顶部
var 存在提升，我们能在声明之前使用。let、const 因为暂时性死区的原因，不能在声明前使用
var 在全局作用域下声明变量会导致变量挂载在 window上，其他两者不会
let 和 const 作用基本一致，但是后者声明的变量不能再次赋值


1.变量提升：变量可以在声明之前使用
console.log(a);//undefined
var a = 1;
console.log(b);//Uncaught ReferenceError: b is not defined
let b = 1;
console.log(c);//Uncaught ReferenceError: c is not defined
const c = 1;
var 有变量提升 let和const没有变量提升

2.暂时性死区：
如果在代码块中存在let和const命令，这个区块对这些命令的变量，从一开始就形成了封闭作用域。
凡事在声明之前使用这些变量就会报错。
暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，
只有等到声明变量的那一行代码出现，才可以获取和使用该变量。
var tmp = 123;
if(true){
  tmp = 'abc';//UncaughtReference: cannot access uninitaileze variable
  let tmp;
}

3.重复声明：
在相同作用域内，重复声明同一个变量
let和const命令声明的变量不允许重复声明
function func(){
  let a = 0;
  const PI = 3.14.15;
  var a = 1;//报错  
  var PI = 3;//报错  
}

4.初始值
由于const声明的是只读的常量，一旦声明就必须初始化，声明之后不能改变
const PI = 3.1415;
PI = 3;//error







