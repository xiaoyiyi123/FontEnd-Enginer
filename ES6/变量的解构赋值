从数组和对象中提取值，对变量进行赋值
let [a,b,c] = [1,2,3];从数组中提取值，按照对应位置对变量赋值
let [head,...tail] = [1,2,3,4];
head;//1     tail;//[2,3,4]
如果解构不成功变量值等于undefined
let [foo] = [];    foo;//undefined
let [bar,foo] = [1];  foo;//undefined
如果等号右边不是数组或者不是可遍历的结构---->报错
let [foo] = 1;//报错
默认值：
let [foo = true] =[]; foo;//true
let [x, y = 'b'] = ['a']; x;//a y;//b
let [x, y = 'b'] = ['a',undefined];x;//a y;//b
只有当一个数组成员严格等于(===)undefined默认值才会生效
function f(){
  console.log('aaa');
}
let [x = f()] = [1];
//如果默认值是一个表达式，那么这个表达式是惰性求值的，那么只有在用到的时候才会求值
因为x能取到值，所以函数f根本不会执行

对象的解构赋值
let {foo,bar} = {foo:'aaa',bar:'bbb'};
foo;//aaa
bar;//bbb
对象的属性没有顺序，变量名必须域属性名同名才能正确的取到值

var { message: msg = 'Something went wrong' } = {};
msg // "Something went wrong"
属性名message，属性值为msg，属性值的默认值等于Something went wrong

函数的解构赋值
function add([x,y]){
  return x+y;
}
add([1,2]);//3

应用
1.交换变量的值
let x = 10;
let y = 20;
[x,y] = [y,x];

2.从函数中返回多个值
function example(){
  return [1,2,3];
}
var [a,b,c] = example();

3.提取json数据
let jsonData = {
  id:42,
  status:'ok',
  data:[867,5309]
};
let {id,status,data:number} = jsonData;
console.log(id,status,number);//42,ok,[867,5309]























