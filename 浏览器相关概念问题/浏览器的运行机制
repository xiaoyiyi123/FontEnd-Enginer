一.浏览器的运行机制
浏览器是如何运行的，如何渲染页面的？
1.构建DOM树（parse）：渲染引擎解析HTML文档，首先将标签转换成DOM树中的DOM node（包括js生成的标签）生成内容树（content Tree/ Dom Tree）
2.构建渲染树（construct）：解析对应的css样式文件信息（包括js生成的样式和外部css文件），构建渲染树，人render tree中的每个node都有自己的style
3.布局渲染树（reflow/layout）：从根节点递归调用，计算每一个元素的大小，位置等，给出每个节点所应该在屏幕上出现的精准坐标；
4。绘制渲染树（paint/repaint）：遍历渲染树，使用UI层来绘制每个节点：

二.重绘和重排
重绘：一个元素外观发生改变所触发的浏览器行为，浏览器会根据元素的新属性来重新绘制，是元素呈现新的外观
触发重绘的条件是改变元素的外观
重排（回流，重构）：当渲染树的一部分因为元素的规模尺寸，布局隐藏等改变而需要重新构建的时候，称做重构。
每个页面至少需要一次回流，就是在页面第一次加载的时候。
触发重拍的条件：任何页面布局和几何属性的改变都会 触发重排（其中页面的初始化触发的重排不可避免）
优化：
1.浏览器自己的优化：浏览器会维护一个队列，把所有会引起回流重拍的操作放入这个队列，等队列中的操作到达一定数量或者到了一定的时间间隔，浏览器就会福禄寿队列，进行一个批次初六，这样会让多次回流变成一次回流。
2.我们自己平时需要注意到的优化：
要减少重排和重绘即要减少对渲染树的操作，可以合并多次的DOM和样式的改变，减少对style样式的请求。
（1）。直接改变元素的className
（2）。display先设置为none，然后进行页面布局等操作，设置当布局操作完成后将元素设置为block，这样就只会两次重绘和重排
（3）。如果需要创建多个dom节点，可以使用DocumentFragment 船舰完后一次性的加入document.
