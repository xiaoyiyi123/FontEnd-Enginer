1.跨域（非同源策略请求）
跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的
同源策略：
同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。
所谓同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。
解决方案：
1.jsonp：
首先要明白script,img,link,iframe这几个标签不存在跨域请求的限制
jsonp就是利用script标签的这个特点来做的
1）客户端：
<script src = "服务器提供的数据接口url?callback = func">
向服务器发送请求，同时将本地的一个函数func发送给服务器
2）服务器端：
服务器接收客户端的请求 callback = func()
准备数据data={....}
给客户端返回字符串数据'func('+JOSN.stringify(data)+')'
//注意jsonp需要服务器短的支持
3）客户端：
接收服务器端传来的数据并作出处理
jQuery实现
$.ajax({
  url:'.............',
  method:'get',
  dataType:jsonp,
  sucess: res=>console.log(res);
});
问题：jsonp方式只能处理get请求，安全性不高

2.CORS跨域资源请求
https://www.ruanyifeng.com/blog/2016/04/cors.html具体参考该网址
CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。
整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。
浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。
因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。
浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。
只要同时满足以下两大条件，就属于简单请求。
1) 请求方法是以下三种方法之一：
HEAD
GET
POST
2）HTTP的头信息不超出以下几种字段：
Accept
Accept-Language
Content-Language
Last-Event-ID
Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/pl
凡是不同时满足上面两个条件，就属于非简单请求。

1).原生js方法
var xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容
// 前端设置是否带cookie
xhr.withCredentials = true;
xhr.open('post', 'http://www.domain2.com:8080/login', true);
xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
xhr.send('user=admin');
xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && xhr.status == 200) {
        alert(xhr.responseText);
    }
};
2).jQuery
$.ajax({
    ...
   xhrFields: {
       withCredentials: true    // 前端设置是否带cookie
   },
   crossDomain: true,   // 会让请求头中包含跨域的额外信息，但不会含cookie
    ...
});
3.）vue框架
a.) axios设置：
axios.defaults.withCredentials = true
b.) vue-resource设置：
Vue.http.options.credentials = true
































