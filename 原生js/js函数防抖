函数防抖(debounce)
在一定时间内，在动作被连续频繁出发的情况下，动作只会执行一次，即调用动作过n秒之后，才会执行该动作。
如果n秒内高频度事件再次被触发则重新计算时间

function debounce(fn){
  var timer = null;//定义一个标记用来存放定时器的返回值
  return function(){
   if(timer){
    clearTimeout(timer);
   }else{
    setTimeout = (()=>{
     fn.apply(this,arguments);
    },500);
   }
  }
}

function sayHi(){
 console.log('Hi')
}

var inp = document.getElementById('inp');
inp.addEventListener('input',debounce(sayHi));
 <input type="text"/>
    <script>
     /*防抖函数
    *一个时间在一定时间内被多次触发，只执行最后一次
    *实现思路：将回调函数放到一个setTimeout函数中,但是由于js的setTimeout的运行机制，
    *在设置的delay时间内如果多次触发的话，计算姐的时间将会被在此基础上再次设置从而就会被触发多次
    *所以我们设置一个clearTimeout阻止setTimeout里的方法执行，
    *目的是将事件内部的连续动作删掉
    *待到用户不触发这事件了，那么setTimeout就执行这个方法
    */
   function sucess(e){
       console.log(e.target.value);
   }
   function debounce(fn,delay){
        var timer;
        return function(e){
            clearTimeout(timer);
            //console.log(e.target.value);
            timer = setTimeout(function(){
                fn.apply(this,[e]);
            },delay);
        };
   }
   var oDebounce = debounce(sucess,2000);
   var input = document.querySelector("input");
   input.addEventListener("input",oDebounce);
    </script>












