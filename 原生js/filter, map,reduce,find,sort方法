1.filter()过滤操作，筛选出符合条件的所有元素，若为true则返回组成新数组
方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。不改变原有数组
let arr=[2,4,6,8];
let arr1=arr.filter(function(item){
    return item>5
})
console.log(arr1) //[6,8]
原生js的实现方式
Array.prototype.myfilter = function (fn, context = null) {
    let arr = this;
    let len = arr.length;
    let index = 0, k = 0;
    let newArr = [];
    if (typeof fn !== 'function') {
        throw new TypeError(fn + ' is not a function');
    }
    while (index < len) {
        if (index in arr) {
            let result = fn.call(context, arr[index], index, arr);
            if (result) newArr[k++] = arr[index]; // 如果返回值为真，就添加进新数组
        }
        index ++;
    }
    return newArr;
};

2.map()
映射操作，对原数组每个元素进行处理并回传新的数组
const inventors = [
  {first:'Albert',last:'Tom',year:1980,passed:2000},
  {first:'blbert',last:'Dom',year:1900,passed:2009},
  {first:'clbert',last:'Rom',year:1888,passed:2008}
];
const fullnames = inventors.map(inventor => `${inventor.fisrt}${inventor.last}`);
console.table(fullnames);

let arr = ['bob','grex','tom'];
let arr1 = arr.map(funciton(item)){
  return `$<li>${item}</li>`;
}
console.log(arr1);
原生js实现
Array.prototype.mymap = function (fn, context = null) {
    let arr = this;
    let len = arr.length;
    let index = 0;
    let newArr = [];
    if (typeof fn !== 'function') {
        throw new TypeError(fn + ' is not a function');
    }
    while (index < len) {
        if (index in arr) {
            let result = fn.call(context, arr[index], index, arr);
            newArr[index] = result; // 返回值作为一个新数组
        }
        index ++;
    }
    return newArr;
};

3.reduce
归并操作，一共两个参数，第一个是函数，可以理解为累加器，遍历数组累加回传的返回值，
第二个初始值。如果没有提供初始值，则将使用数组中的第一个元素
let arr = [2,3,4,6,8];
let result = arr.reduce(
  function(val,item,index,origin){
    return val + item;
  }
,0);
array.reduce(function(total,currentvalue,currentIndex,arr),initalValue);
total:必须。初始值，或者计算结束的返回值
currentValue：必须。当前元素。
currentIndex：可选。当前元素所属的数组对象。
arr：可选。当前元素所属的数组对象。

Array.prototype.myreduce = function (...arg) {
    let arr = this;
    let len = arr.length;
    let index = 0;
    let fn = arg[0], result;
    if (arg.length >= 2) { // 判断是否有第二个参数，有的话作为回调函数运行的初始值
        result = arg[1];
    } else {
        // reduce 在没有第二个参数的时候，会把数组的第一项作为回调的初始值
        // 第一项并不一定是 a[0]
        while (index < len && !(index in arr)) {
        // 下标小于数组长度且下标不属于该数组就一直循环，用来找到数组的第一项
            index++;
        }
        if (index >= len) { // 如果第一项大于等于数组长度，则说明是空数组
            throw new TypeError( '空数组且没有初始值' );
        }
        result = arr[index++]; // 赋值之后下标+1
    }
    if (typeof fn !== 'function') {
        throw new TypeError(fn + ' is not a function');
    }
    while (index < len) {
        if (index in arr) {
            result = fn(result, arr[index], index, arr); // 每次回调的返回值，都会传入下次回调
        }
        index ++;
    }
    return result;
}

使用reduce实现map
Array.prototype.mapByreduce = function (fn, context = null) {
    let arr = this;
    if (typeof fn !== 'function') {
         throw new TypeError(fn + ' is not a function');
    }
    return arr.reduce((pre, cur, index, array) => {
        let res = fn.call(context, cur, index, array);
        return [...pre, res]; // 返回一个新数组
    }, []);
};

4.find（）：返回数组中满足提供的测试函数的第一个元素的值，否则返回undefined
let arr = [1,2,3];
let arr1 = arr.find(function(item)){
  return item>=2;
});
console.log(arr);

Array.prototype.myFind = function(fn){
  for(let i= 0; i< this.length; i++){
    if(fn(this[i])){
      return this[i];
    }
  }

}













