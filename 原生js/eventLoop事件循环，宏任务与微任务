相关概念：
1.js是单线程的：为什么？
js的主要用途是与用户互动，以及DOM操作。
如果js有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除这个节点，浏览器该咋办？
所以js只能是单线程的

2.同步任务：
在主线程上排队执行的任务，只有当前一个任务执行完毕，才执行下一个任务

3.异步任务：
不进入主线程，而进入“任务队列”task queue的任务。
只有“任务队列”通知主线程，某个异步可以执行了，该任务才会进入主线程执行

4.异步执行机制：
1）所有的同步任务都在主线程上执行从而形成一个任务栈（execution context stack）,
2）主线程之外，还存在一个“任务队列”task queue，
  只要异步任务有了运行结果，就在“任务队列”中放置一个事件
3）一旦“执行栈”中的所有同步任务执行完毕，系统就会读取“任务队列”，看看里面有哪些事件。
  那些对应的是异步任务，于是那些异步任务结束等待状态，进入执行栈开始执行。
4）主线程不断重复上面的第三步。

5.任务队列
一个先进先出的数据结构，排在前面的事件先被主线程读取

6.事件循环（EventLoop）
主线程从“任务队列”中读取事件，这个过程是循环不断的，整个过程称为事件循环。
1）执行栈选择最先进入队列的宏任务（通常是script的整体代码），如果有则执行，
2）检查是否存在microtask,如果存在则不停的执行，直至清空microtask队列，
3）更新render（每一次事件循环，浏览器都可能会更新渲染），
4）重复以上步骤

7.宏任务与微任务机制：
1）执行一个宏任务（栈中没有就从事件队列中获取）
2）执行过程中遇到微任务就将它添加到微任务的队列中
3）宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）
4）当前宏任务执行完毕后，开始检查渲染，然后GUI线程接管渲染
5）渲染完毕后js线程继续接管，开始下一个宏任务（从事件队列中获取）
注意：
宏任务：
需要多次事件循环才能执行完，微任务是一次执行完的
事件队列中的每一个是假都是一个macrotask
优先级：主代码>setImmidiate>MessageChannel>setTimeout>setIntervial
微任务：process.nextTick>Promise>MutationObserver

常见的相关面试题：
console.log('start');
setTimeout(()=>{
  console.log('setTimeout');
},0);
new Promise((resolve,reject)=>{
  for(var i = 0; i < 5; i++){
    console.log(i);
  }
  resolve();
}).then(()=>
  console.log('Promise callback success');
);
console.log('end');
//start end 0 1 2 3 4 Promise callback success setTimeout



















