1.new操作符其实做了以下四步：
var obj = new Object(); // 创建一个空对象
obj.__proto__ = F.prototype; // obj的__proto__指向构造函数的prototype
var result = F.call(obj); // 把构造函数的this指向obj，并执行构造函数把结果赋值给result
if (typeof(result) === 'object') {
    objB = result; // 构造函数F的执行结果是引用类型，就把这个引用类型的对象返回给objB
} else {
    objB = obj; // 构造函数F的执行结果是值类型，就返回obj这个空对象给objB
}
有点难理解：我还是喜欢这种理解方式
new的时候首先在构造函数的函数体顶部隐式地构造一个this的空对象
执行this.xxx = xx; this.yyy = yyy;
最后将这个this的对象隐式的返回
new 关键字创建
var objB = new Object();
objB.name = 'b';
objB.sayName = function(){
  console.log(`My name is ${this.name}`);
}
objB.sayName();

2.直接字面量创建
var objA = {};
objA.name = 'a';
objA.sayName = function(){
  console.log(`My name is ${this.name}`);
}
objA.sayName();

3.Object.create()
创建一个新对象，使用现有的对象来提供新创建的__proto__
const person = {
  isHuman:false,
  printIntroduction: function(){
    console.log(`My name is ${this.name}, am I human?${this.isHuman}`);
  }
};
const me = Object.create(person);//me.__proto__ == person
me.name = "Matthew"; // name属性被设置在新对象me上，而不是现有对象person上
me.isHuman = true; // 继承的属性可以被重写
me.printIntroduction(); // My name is Matthew. Am I human? true

返回了一个新的空对象，并且这个空对象的构造函数的原型 prototype指向person
Object.create();内部实现原理
_create = function (o) {
    let F = function () {}
    F.prototype = o
    return new F()
}

new和Object.create()的区别总结
字面量和new关键字创建的对象是Object的实例，
原型指向Object.prototype，继承内置对象Object。
Object.create(arg, pro)创建的对象的原型取决于arg，
arg为null，新对象是空对象，没有原型，不继承任何对象；
arg为指定对象，新对象的原型指向指定对象，继承指定对象。










