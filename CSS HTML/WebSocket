1.简介
它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话
（1）建立在 TCP 协议之上，服务器端的实现比较容易。
（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，
    并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。
（3）数据格式比较轻量，性能开销小，通信高效。
（4）可以发送文本，也可以发送二进制数据。
（5）没有同源限制，客户端可以与任意服务器通信。
（6）协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。

2.客户端的简单实例
//WebSocket 对象作为一个构造函数，用于新建 WebSocket 实例。
//客户端和服务器进行连接
var ws = new WebSocket("wss://echo.websocket.org");

//实例对象的onopen属性，用于指定连接成功后的回调函数。
/*如果要指定多个回调函数，可以使用addEventListener方法。
* ws.addEventListener('open', function (event) {
* ws.send('Hello Server!');
});
*/
ws.onopen = function(evt) { 
  console.log("Connection open ..."); 
  ws.send("Hello WebSockets!");//实例对象的send()方法用于向服务器发送数据。
};

//实例对象的onmessage属性，用于指定收到服务器数据后的回调函数
ws.onmessage = function(evt) {
  console.log( "Received Message: " + evt.data);
  ws.close();
};

//实例对象的onclose属性，用于指定连接关闭后的回调函数
ws.onclose = function(evt) {
  console.log("Connection closed.");
};      

webSocket.onerror
实例对象的onerror属性，用于指定报错时的回调函数。
socket.onerror = function(event) {
  // handle error event
};
socket.addEventListener("error", function(event) {
  // handle error event
});

webSocket.readyState
readyState属性返回实例对象的当前状态，共有四种。
CONNECTING：值为0，表示正在连接。
OPEN：值为1，表示连接成功，可以通信了。
CLOSING：值为2，表示连接正在关闭。
CLOSED：值为3，表示连接已经关闭，或者打开连接失败。
















