1.百分比布局
优点：最早的解决方案，解决成本低，高效。将页面元素的高度以百分比的形式设置，高度不变。
缺点：在iPad等横屏下，页面被拉伸很多，造成视觉体验效果差
子元素的height或width中使用百分比，是相对于子元素的直接父元素，width相对于父元素的width，height相对于父元素的height；
子元素的top和bottom如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度，
同样子元素的left和right如果设置百分比，则相对于直接非static定位(默认定位的)父元素的宽度；
子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。
跟padding一样，margin也是如此，子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width；
border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度，
除了border-radius外，还有比如translate、background-size等都是相对于自身的；
/* pc width > 1100px */
html, body { margin: 0;padding: 0;width: 100%;height: 100%;}
aside {
    width: 10%;
    height: 100%;
    background-color: red;
    float: left;
}
main {
    height: 100%;
    background-color: blue;
    overflow: hidden;
}
/* ipad pro */
@media screen and (max-width: 1024px) {
    aside {
      width: 8%;
      background-color: yellow;
    }
}
/* ipad */
@media screen and (max-width: 768px) {
    aside {
      float: none;
      width: 100%;
      height: 10%;
      background-color: green;
    }
    main {
      height: calc(100vh - 10%);
      background-color: red;
    }
}
/* iphone6 7 8 plus */
@media screen and (max-width: 414px) {
    aside {
      float: none;
      width: 100%;
      height: 5%;
      background-color: yellow;
    }
    main {
      height: calc(100vh - 5%);
      background-color: red;
    }
}
/* iphoneX */
@media screen and (max-width: 375px) and (-webkit-device-pixel-ratio: 3) {
    aside {
      float: none;
      width: 100%;
      height: 10%;
      background-color: blue;
    }
    main {
      height: calc(100vh - 10%);
      background-color: red;
    }
}
/* iphone6 7 8 */
@media screen and (max-width: 375px) and (-webkit-device-pixel-ratio: 2) {
    aside {
      float: none;
      width: 100%;
      height: 3%;
      background-color: black;
    }
    main {
      height: calc(100vh - 3%);
      background-color: red;
    }
}
/* iphone5 */
@media screen and (max-width: 320px) {
    aside {
      float: none;
      width: 100%;
      height: 7%;
      background-color: green;
    }
    main {
      height: calc(100vh - 7%);
      background-color: red;
    }
}


2.Media媒体查询
为了解决百分比布局带来的宽屏视觉上的缺点，
引入了media的方案，将设备按分辨率分成几个标准化的区间，
视觉根据区间设计出2-3个方案(方案数量决定了精细化的程度)，
前端根据media来区分在某个分辨率区间读取相应的css方案。
缺点是需要设计和前端同时多出多个方案。
html{font-size:10px}
@media screen and (min-width:320px) and (max-width:480px){html{font-size:12px}}
@media screen and (min-width:480px) and (max-width:640px){html{font-size:14px}}
@media screen and (min-width:640px){html{font-size:16px}}


3.rem布局（主流解决方案Flexible）
根据标准视觉稿，先作出一套以rem为单位的页面，然后通过在不同分辨率的情况下，
用js或media去改变根html的font-size的值，从而到达页面的自适应效果。
Flexible作为比较知名的成熟方案，也已经出现很久了，技术原理主要就是为了能让页面更好的适配各种不同的终端，
通过Hack手段来根据设备的dpr值相应改变标签中viewport的值，从而让页面达么缩放的效果，也变相的实现页面的适配功能。
<!-- dpr = 1--> <meta name="viewport" content="initial-scale=scale,maximum-scale=scale,minimum-scale=scale,user-scalable=no">
<!-- dpr = 2--> <meta name="viewport" content="initial-scale=0.5,maximum-scale=0.5,minimum-scale=0.5,user-scalable=no"> 
<!-- dpr = 3--> <meta name="viewport" content="initial-scale=0.3333333333,maximum-scale=0.3333333333,minimum-scale=0.3333333333,user-scalable=no">
Flexible技术原理：
根据dpr的值来修改viewport实现1px的线
根据dpr的值来修改html的font-size，从而使用rem实现等比缩
使用Hack手段用rem模拟vw特性





