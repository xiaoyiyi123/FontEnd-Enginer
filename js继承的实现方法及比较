在明白js继承的实现方法之前首先要明白js的Object.create的内部实现原理
function object(o){
  function F(){}//在object函数内部先创建一个临时性的构造函数F(){}
  F.prototype = o;//将传入的o对象作为这个构造函数的原型
  return new F();//返回了这个临时的类的新实例
}从本质上讲这个object函数返回了一个引用传入对象的新对象。

// 原型式继承
function Woker(o){
    function Empty(){};
    Empty.prototype = o;
    return new Empty();
}
var mine = {
    name: 'jia',
    age: 18,
    job: '打杂的'
};
var anotherMine =Woker(mine);
//利用Object.create 函数进行优化
var anotherMine = Object.create(mine,{
  name:{
    value:'ji',
    age:20,
    job:'boss'
  }
});
alert(anotherMine.name);//ji

寄生式继承
创建一个仅用于封装继承过程的函数
function createAnother(orignal){
  var clone = object(oringal);
  clone.sayHi = function (){
    alert("Hi");
  }
  return clone;

}

寄生组合式继承又称圣杯模式
function extend(subClass,superClass){
  var F = function(){};
  F.prototype = superClass.prototype;
  subClass.prototype = new F();//core
  subClass.prototype.constructor = subClass;//归位
  subClass.superClass = superClass.prototype;//找出真正的父类
  if(superClass.prototype.constructor == Object.prototype.consturctor){
    superClass.prototype.constructor = superClass;
  }
  
}

//原型链继承
1.子类构造其中调用父类的构造器--Super.call(this)
2.Sub.prototype = new Super();
3.Sub.prototype.constructor = Sub;
function Sub(value){
  Super.call(this);
}
Sub.prototype = new Super()
Sub.prototype.constructor = Sub;

//ES6中extends继承
class Person{
  constructor(name,age){
    this.name = name;
    this.age = age;
  }
  eat(){
    return "eating"
  } 
}
class Student extends Person{
  constructor(name,age,grade){
    super(name,age);
    this.grade = grade;
    
  }
}

var student1 = new Student();
console.log(student1);
继承的时候extends干了什么事
1.将类的原型对象(prototype)里面的__proto__指向父类的原型duixiang
Student.prototype =  Object.create(Person.prototype,{constructor:{value:Student}})
即将Student.prototype.__proto__ = Person.prototype
2.将类的__proto__指向父类
Object.setPrototypeof(Student,Person)
即将Student.__proto__ = Person(由Person来构造Student)






















