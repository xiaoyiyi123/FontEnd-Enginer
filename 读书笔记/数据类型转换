== 进行比较的时候需要进行数据类型转换
1.{} == {} 两个对象进行比较，比较的是对内存的地址
2.null == undefined -> true
  null === undefined => false
3.NaN == NaN => false
4. [12] == '12'对象和字符串比较，是吧对象toString()转化为字符串后再进行比较
5.剩余所有情况在进行比较的时候，都是转化为数字

例：
[12] == true;  -> false
过程： Number([12].toString()) => 12
12==1 -> false
对象转化成数字过程：先转化为字符串，再转化为数字
字符串转数字，只要出现一个非数字字符，结果就是NaN
布尔转数字，true->1,flase->0
null ->0
undefined ->NaN
[] -> 0

当左右两边数据类型不相同非情况下，对象和字符串比较，对象转化成字符串，null == undefined,
其余情况都是转化成数字进行比较


对象和数字比较，先把对象.toString变为字符串，在转化成数字
[12].toString() ===> '12'
({12}).toStinr() ===> '[object Object]'

//var a =  ???a满足什么条件的时候才能打印出1

var a = {
  n:0,
  toString:function(){
    return ++this.n;
  }
}
//a.toString();//则直接调用对象a自己私有的方法
//此时比较的时候，先进行数据类型转换，a.toString();调用对象a自己的toSting方法，将n+1，然后返回给a，
//每次隐式数据类型转换的时候都用自己的方法，将a+1
if(a == 1 && a == 2 && a == 3){
  console.log(1)
}

方法二：

let a = [1,2,3];
a.toString = a.shit();//让自己私有的toString方法等于a.shift()
